/*
 * This file is generated by jOOQ.
 */
package quantasma.app.db.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import quantasma.app.db.Public;
import quantasma.app.db.tables.records.TablesContainingAuditColumnsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TablesContainingAuditColumns extends TableImpl<TablesContainingAuditColumnsRecord> {

    private static final long serialVersionUID = 238956921;

    /**
     * The reference instance of <code>public.tables_containing_audit_columns</code>
     */
    public static final TablesContainingAuditColumns TABLES_CONTAINING_AUDIT_COLUMNS = new TablesContainingAuditColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TablesContainingAuditColumnsRecord> getRecordType() {
        return TablesContainingAuditColumnsRecord.class;
    }

    /**
     * The column <code>public.tables_containing_audit_columns.schema_name</code>.
     */
    public final TableField<TablesContainingAuditColumnsRecord, String> SCHEMA_NAME = createField("schema_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tables_containing_audit_columns.table_name</code>.
     */
    public final TableField<TablesContainingAuditColumnsRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.tables_containing_audit_columns</code> table reference
     */
    public TablesContainingAuditColumns() {
        this(DSL.name("tables_containing_audit_columns"), null);
    }

    /**
     * Create an aliased <code>public.tables_containing_audit_columns</code> table reference
     */
    public TablesContainingAuditColumns(String alias) {
        this(DSL.name(alias), TABLES_CONTAINING_AUDIT_COLUMNS);
    }

    /**
     * Create an aliased <code>public.tables_containing_audit_columns</code> table reference
     */
    public TablesContainingAuditColumns(Name alias) {
        this(alias, TABLES_CONTAINING_AUDIT_COLUMNS);
    }

    private TablesContainingAuditColumns(Name alias, Table<TablesContainingAuditColumnsRecord> aliased) {
        this(alias, aliased, new Field[0]);
    }

    private TablesContainingAuditColumns(Name alias, Table<TablesContainingAuditColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TablesContainingAuditColumns(Table<O> child, ForeignKey<O, TablesContainingAuditColumnsRecord> key) {
        super(child, key, TABLES_CONTAINING_AUDIT_COLUMNS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TablesContainingAuditColumns as(String alias) {
        return new TablesContainingAuditColumns(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TablesContainingAuditColumns as(Name alias) {
        return new TablesContainingAuditColumns(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public TablesContainingAuditColumns rename(String name) {
        return new TablesContainingAuditColumns(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public TablesContainingAuditColumns rename(Name name) {
        return new TablesContainingAuditColumns(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public TablesContainingAuditColumns call() {
        return new TablesContainingAuditColumns(DSL.name(getName()), null, new Field[] { 
        });
    }
}
