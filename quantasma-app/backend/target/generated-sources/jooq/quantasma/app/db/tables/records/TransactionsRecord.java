/*
 * This file is generated by jOOQ.
 */
package quantasma.app.db.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;

import quantasma.app.db.enums.TransactionStatus;
import quantasma.app.db.tables.Transactions;
import quantasma.app.db.tables.interfaces.ITransactions;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "transactions", schema = "public", indexes = {
    @Index(name = "transactions_idx_open_order_id", columnList = "open_order_id ASC"),
    @Index(name = "transactions_idx_open_order_id_close_order_id", columnList = "open_order_id ASC, close_order_id ASC"),
    @Index(name = "transactions_idx_strategy_id", columnList = "strategy_id ASC"),
    @Index(name = "transactions_pk_id", unique = true, columnList = "id ASC")
})
public class TransactionsRecord extends UpdatableRecordImpl<TransactionsRecord> implements Record13<Long, Long, LocalDateTime, LocalDateTime, Long, Long, BigDecimal, Long, TransactionStatus, LocalDateTime, LocalDateTime, LocalDateTime, Boolean>, ITransactions {

    private static final long serialVersionUID = 1775722921;

    /**
     * Setter for <code>public.transactions.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.transactions.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", unique = true, nullable = false, precision = 64)
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.transactions.broker_id</code>.
     */
    @Override
    public void setBrokerId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.transactions.broker_id</code>.
     */
    @Column(name = "broker_id", nullable = false, precision = 64)
    @NotNull
    @Override
    public Long getBrokerId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.transactions.open_on</code>.
     */
    @Override
    public void setOpenOn(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.transactions.open_on</code>.
     */
    @Column(name = "open_on", nullable = false)
    @NotNull
    @Override
    public LocalDateTime getOpenOn() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.transactions.close_on</code>.
     */
    @Override
    public void setCloseOn(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.transactions.close_on</code>.
     */
    @Column(name = "close_on")
    @Override
    public LocalDateTime getCloseOn() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>public.transactions.open_order_id</code>.
     */
    @Override
    public void setOpenOrderId(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.transactions.open_order_id</code>.
     */
    @Column(name = "open_order_id", nullable = false, precision = 64)
    @NotNull
    @Override
    public Long getOpenOrderId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.transactions.close_order_id</code>.
     */
    @Override
    public void setCloseOrderId(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.transactions.close_order_id</code>.
     */
    @Column(name = "close_order_id", precision = 64)
    @Override
    public Long getCloseOrderId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.transactions.pips_profit</code>.
     */
    @Override
    public void setPipsProfit(BigDecimal value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.transactions.pips_profit</code>.
     */
    @Column(name = "pips_profit")
    @Override
    public BigDecimal getPipsProfit() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>public.transactions.strategy_id</code>.
     */
    @Override
    public void setStrategyId(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.transactions.strategy_id</code>.
     */
    @Column(name = "strategy_id", nullable = false, precision = 64)
    @NotNull
    @Override
    public Long getStrategyId() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>public.transactions.status</code>.
     */
    @Override
    public void setStatus(TransactionStatus value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.transactions.status</code>.
     */
    @Column(name = "status", nullable = false)
    @NotNull
    @Override
    public TransactionStatus getStatus() {
        return (TransactionStatus) get(8);
    }

    /**
     * Setter for <code>public.transactions.x_created_on</code>.
     */
    @Override
    public void setXCreatedOn(LocalDateTime value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.transactions.x_created_on</code>.
     */
    @Column(name = "x_created_on", nullable = false)
    @Override
    public LocalDateTime getXCreatedOn() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>public.transactions.x_updated_on</code>.
     */
    @Override
    public void setXUpdatedOn(LocalDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.transactions.x_updated_on</code>.
     */
    @Column(name = "x_updated_on")
    @Override
    public LocalDateTime getXUpdatedOn() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for <code>public.transactions.x_deleted_on</code>.
     */
    @Override
    public void setXDeletedOn(LocalDateTime value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.transactions.x_deleted_on</code>.
     */
    @Column(name = "x_deleted_on")
    @Override
    public LocalDateTime getXDeletedOn() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>public.transactions.x_active</code>.
     */
    @Override
    public void setXActive(Boolean value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.transactions.x_active</code>.
     */
    @Column(name = "x_active")
    @Override
    public Boolean getXActive() {
        return (Boolean) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row13<Long, Long, LocalDateTime, LocalDateTime, Long, Long, BigDecimal, Long, TransactionStatus, LocalDateTime, LocalDateTime, LocalDateTime, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row13<Long, Long, LocalDateTime, LocalDateTime, Long, Long, BigDecimal, Long, TransactionStatus, LocalDateTime, LocalDateTime, LocalDateTime, Boolean> valuesRow() {
        return (Row13) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Transactions.TRANSACTIONS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return Transactions.TRANSACTIONS.BROKER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field3() {
        return Transactions.TRANSACTIONS.OPEN_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field4() {
        return Transactions.TRANSACTIONS.CLOSE_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field5() {
        return Transactions.TRANSACTIONS.OPEN_ORDER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field6() {
        return Transactions.TRANSACTIONS.CLOSE_ORDER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigDecimal> field7() {
        return Transactions.TRANSACTIONS.PIPS_PROFIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field8() {
        return Transactions.TRANSACTIONS.STRATEGY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<TransactionStatus> field9() {
        return Transactions.TRANSACTIONS.STATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field10() {
        return Transactions.TRANSACTIONS.X_CREATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field11() {
        return Transactions.TRANSACTIONS.X_UPDATED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field12() {
        return Transactions.TRANSACTIONS.X_DELETED_ON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field13() {
        return Transactions.TRANSACTIONS.X_ACTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component2() {
        return getBrokerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component3() {
        return getOpenOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component4() {
        return getCloseOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component5() {
        return getOpenOrderId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component6() {
        return getCloseOrderId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal component7() {
        return getPipsProfit();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component8() {
        return getStrategyId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionStatus component9() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component10() {
        return getXCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component11() {
        return getXUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component12() {
        return getXDeletedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component13() {
        return getXActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getBrokerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value3() {
        return getOpenOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value4() {
        return getCloseOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value5() {
        return getOpenOrderId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value6() {
        return getCloseOrderId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal value7() {
        return getPipsProfit();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value8() {
        return getStrategyId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionStatus value9() {
        return getStatus();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value10() {
        return getXCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value11() {
        return getXUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value12() {
        return getXDeletedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value13() {
        return getXActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value2(Long value) {
        setBrokerId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value3(LocalDateTime value) {
        setOpenOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value4(LocalDateTime value) {
        setCloseOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value5(Long value) {
        setOpenOrderId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value6(Long value) {
        setCloseOrderId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value7(BigDecimal value) {
        setPipsProfit(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value8(Long value) {
        setStrategyId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value9(TransactionStatus value) {
        setStatus(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value10(LocalDateTime value) {
        setXCreatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value11(LocalDateTime value) {
        setXUpdatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value12(LocalDateTime value) {
        setXDeletedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord value13(Boolean value) {
        setXActive(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionsRecord values(Long value1, Long value2, LocalDateTime value3, LocalDateTime value4, Long value5, Long value6, BigDecimal value7, Long value8, TransactionStatus value9, LocalDateTime value10, LocalDateTime value11, LocalDateTime value12, Boolean value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ITransactions from) {
        setId(from.getId());
        setBrokerId(from.getBrokerId());
        setOpenOn(from.getOpenOn());
        setCloseOn(from.getCloseOn());
        setOpenOrderId(from.getOpenOrderId());
        setCloseOrderId(from.getCloseOrderId());
        setPipsProfit(from.getPipsProfit());
        setStrategyId(from.getStrategyId());
        setStatus(from.getStatus());
        setXCreatedOn(from.getXCreatedOn());
        setXUpdatedOn(from.getXUpdatedOn());
        setXDeletedOn(from.getXDeletedOn());
        setXActive(from.getXActive());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ITransactions> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionsRecord
     */
    public TransactionsRecord() {
        super(Transactions.TRANSACTIONS);
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(Long id, Long brokerId, LocalDateTime openOn, LocalDateTime closeOn, Long openOrderId, Long closeOrderId, BigDecimal pipsProfit, Long strategyId, TransactionStatus status, LocalDateTime xCreatedOn, LocalDateTime xUpdatedOn, LocalDateTime xDeletedOn, Boolean xActive) {
        super(Transactions.TRANSACTIONS);

        set(0, id);
        set(1, brokerId);
        set(2, openOn);
        set(3, closeOn);
        set(4, openOrderId);
        set(5, closeOrderId);
        set(6, pipsProfit);
        set(7, strategyId);
        set(8, status);
        set(9, xCreatedOn);
        set(10, xUpdatedOn);
        set(11, xDeletedOn);
        set(12, xActive);
    }
}
