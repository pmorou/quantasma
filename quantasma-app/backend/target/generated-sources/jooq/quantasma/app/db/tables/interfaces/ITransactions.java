/*
 * This file is generated by jOOQ.
 */
package quantasma.app.db.tables.interfaces;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import quantasma.app.db.enums.TransactionStatus;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "transactions", schema = "public", indexes = {
    @Index(name = "transactions_idx_open_order_id", columnList = "open_order_id ASC"),
    @Index(name = "transactions_idx_open_order_id_close_order_id", columnList = "open_order_id ASC, close_order_id ASC"),
    @Index(name = "transactions_idx_strategy_id", columnList = "strategy_id ASC"),
    @Index(name = "transactions_pk_id", unique = true, columnList = "id ASC")
})
public interface ITransactions extends Serializable {

    /**
     * Setter for <code>public.transactions.id</code>.
     */
    public void setId(Long value);

    /**
     * Getter for <code>public.transactions.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", unique = true, nullable = false, precision = 64)
    public Long getId();

    /**
     * Setter for <code>public.transactions.broker_id</code>.
     */
    public void setBrokerId(Long value);

    /**
     * Getter for <code>public.transactions.broker_id</code>.
     */
    @Column(name = "broker_id", nullable = false, precision = 64)
    @NotNull
    public Long getBrokerId();

    /**
     * Setter for <code>public.transactions.open_on</code>.
     */
    public void setOpenOn(LocalDateTime value);

    /**
     * Getter for <code>public.transactions.open_on</code>.
     */
    @Column(name = "open_on", nullable = false)
    @NotNull
    public LocalDateTime getOpenOn();

    /**
     * Setter for <code>public.transactions.close_on</code>.
     */
    public void setCloseOn(LocalDateTime value);

    /**
     * Getter for <code>public.transactions.close_on</code>.
     */
    @Column(name = "close_on")
    public LocalDateTime getCloseOn();

    /**
     * Setter for <code>public.transactions.open_order_id</code>.
     */
    public void setOpenOrderId(Long value);

    /**
     * Getter for <code>public.transactions.open_order_id</code>.
     */
    @Column(name = "open_order_id", nullable = false, precision = 64)
    @NotNull
    public Long getOpenOrderId();

    /**
     * Setter for <code>public.transactions.close_order_id</code>.
     */
    public void setCloseOrderId(Long value);

    /**
     * Getter for <code>public.transactions.close_order_id</code>.
     */
    @Column(name = "close_order_id", precision = 64)
    public Long getCloseOrderId();

    /**
     * Setter for <code>public.transactions.pips_profit</code>.
     */
    public void setPipsProfit(BigDecimal value);

    /**
     * Getter for <code>public.transactions.pips_profit</code>.
     */
    @Column(name = "pips_profit")
    public BigDecimal getPipsProfit();

    /**
     * Setter for <code>public.transactions.strategy_id</code>.
     */
    public void setStrategyId(Long value);

    /**
     * Getter for <code>public.transactions.strategy_id</code>.
     */
    @Column(name = "strategy_id", nullable = false, precision = 64)
    @NotNull
    public Long getStrategyId();

    /**
     * Setter for <code>public.transactions.status</code>.
     */
    public void setStatus(TransactionStatus value);

    /**
     * Getter for <code>public.transactions.status</code>.
     */
    @Column(name = "status", nullable = false)
    @NotNull
    public TransactionStatus getStatus();

    /**
     * Setter for <code>public.transactions.x_created_on</code>.
     */
    public void setXCreatedOn(LocalDateTime value);

    /**
     * Getter for <code>public.transactions.x_created_on</code>.
     */
    @Column(name = "x_created_on", nullable = false)
    public LocalDateTime getXCreatedOn();

    /**
     * Setter for <code>public.transactions.x_updated_on</code>.
     */
    public void setXUpdatedOn(LocalDateTime value);

    /**
     * Getter for <code>public.transactions.x_updated_on</code>.
     */
    @Column(name = "x_updated_on")
    public LocalDateTime getXUpdatedOn();

    /**
     * Setter for <code>public.transactions.x_deleted_on</code>.
     */
    public void setXDeletedOn(LocalDateTime value);

    /**
     * Getter for <code>public.transactions.x_deleted_on</code>.
     */
    @Column(name = "x_deleted_on")
    public LocalDateTime getXDeletedOn();

    /**
     * Setter for <code>public.transactions.x_active</code>.
     */
    public void setXActive(Boolean value);

    /**
     * Getter for <code>public.transactions.x_active</code>.
     */
    @Column(name = "x_active")
    public Boolean getXActive();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface ITransactions
     */
    public void from(quantasma.app.db.tables.interfaces.ITransactions from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface ITransactions
     */
    public <E extends quantasma.app.db.tables.interfaces.ITransactions> E into(E into);
}
