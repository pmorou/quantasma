/*
 * This file is generated by jOOQ.
 */
package quantasma.app.db.tables.pojos;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import quantasma.app.db.enums.OrderStatus;
import quantasma.app.db.tables.interfaces.IOrders;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "orders", schema = "public", indexes = {
    @Index(name = "orders_pk_id", unique = true, columnList = "id ASC")
})
public class Orders implements IOrders {

    private static final long serialVersionUID = 203827830;

    private Long          id;
    private Long          instrumentId;
    private String        side;
    private Long          amount;
    private BigDecimal    price;
    private OrderStatus   status;
    private LocalDateTime xCreatedOn;
    private LocalDateTime xUpdatedOn;
    private LocalDateTime xDeletedOn;
    private Boolean       xActive;

    public Orders() {}

    public Orders(IOrders value) {
        this.id = value.getId();
        this.instrumentId = value.getInstrumentId();
        this.side = value.getSide();
        this.amount = value.getAmount();
        this.price = value.getPrice();
        this.status = value.getStatus();
        this.xCreatedOn = value.getXCreatedOn();
        this.xUpdatedOn = value.getXUpdatedOn();
        this.xDeletedOn = value.getXDeletedOn();
        this.xActive = value.getXActive();
    }

    public Orders(
        Long          id,
        Long          instrumentId,
        String        side,
        Long          amount,
        BigDecimal    price,
        OrderStatus   status,
        LocalDateTime xCreatedOn,
        LocalDateTime xUpdatedOn,
        LocalDateTime xDeletedOn,
        Boolean       xActive
    ) {
        this.id = id;
        this.instrumentId = instrumentId;
        this.side = side;
        this.amount = amount;
        this.price = price;
        this.status = status;
        this.xCreatedOn = xCreatedOn;
        this.xUpdatedOn = xUpdatedOn;
        this.xDeletedOn = xDeletedOn;
        this.xActive = xActive;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", unique = true, nullable = false, precision = 64)
    @Override
    public Long getId() {
        return this.id;
    }

    @Override
    public void setId(Long id) {
        this.id = id;
    }

    @Column(name = "instrument_id", nullable = false, precision = 64)
    @NotNull
    @Override
    public Long getInstrumentId() {
        return this.instrumentId;
    }

    @Override
    public void setInstrumentId(Long instrumentId) {
        this.instrumentId = instrumentId;
    }

    @Column(name = "side", nullable = false, length = 4)
    @NotNull
    @Size(max = 4)
    @Override
    public String getSide() {
        return this.side;
    }

    @Override
    public void setSide(String side) {
        this.side = side;
    }

    @Column(name = "amount", nullable = false, precision = 64)
    @NotNull
    @Override
    public Long getAmount() {
        return this.amount;
    }

    @Override
    public void setAmount(Long amount) {
        this.amount = amount;
    }

    @Column(name = "price", nullable = false)
    @NotNull
    @Override
    public BigDecimal getPrice() {
        return this.price;
    }

    @Override
    public void setPrice(BigDecimal price) {
        this.price = price;
    }

    @Column(name = "status", nullable = false)
    @NotNull
    @Override
    public OrderStatus getStatus() {
        return this.status;
    }

    @Override
    public void setStatus(OrderStatus status) {
        this.status = status;
    }

    @Column(name = "x_created_on", nullable = false)
    @Override
    public LocalDateTime getXCreatedOn() {
        return this.xCreatedOn;
    }

    @Override
    public void setXCreatedOn(LocalDateTime xCreatedOn) {
        this.xCreatedOn = xCreatedOn;
    }

    @Column(name = "x_updated_on")
    @Override
    public LocalDateTime getXUpdatedOn() {
        return this.xUpdatedOn;
    }

    @Override
    public void setXUpdatedOn(LocalDateTime xUpdatedOn) {
        this.xUpdatedOn = xUpdatedOn;
    }

    @Column(name = "x_deleted_on")
    @Override
    public LocalDateTime getXDeletedOn() {
        return this.xDeletedOn;
    }

    @Override
    public void setXDeletedOn(LocalDateTime xDeletedOn) {
        this.xDeletedOn = xDeletedOn;
    }

    @Column(name = "x_active")
    @Override
    public Boolean getXActive() {
        return this.xActive;
    }

    @Override
    public void setXActive(Boolean xActive) {
        this.xActive = xActive;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Orders (");

        sb.append(id);
        sb.append(", ").append(instrumentId);
        sb.append(", ").append(side);
        sb.append(", ").append(amount);
        sb.append(", ").append(price);
        sb.append(", ").append(status);
        sb.append(", ").append(xCreatedOn);
        sb.append(", ").append(xUpdatedOn);
        sb.append(", ").append(xDeletedOn);
        sb.append(", ").append(xActive);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IOrders from) {
        setId(from.getId());
        setInstrumentId(from.getInstrumentId());
        setSide(from.getSide());
        setAmount(from.getAmount());
        setPrice(from.getPrice());
        setStatus(from.getStatus());
        setXCreatedOn(from.getXCreatedOn());
        setXUpdatedOn(from.getXUpdatedOn());
        setXDeletedOn(from.getXDeletedOn());
        setXActive(from.getXActive());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IOrders> E into(E into) {
        into.from(this);
        return into;
    }
}
