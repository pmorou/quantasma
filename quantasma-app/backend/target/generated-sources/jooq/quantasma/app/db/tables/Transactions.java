/*
 * This file is generated by jOOQ.
 */
package quantasma.app.db.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import quantasma.app.db.Indexes;
import quantasma.app.db.Keys;
import quantasma.app.db.Public;
import quantasma.app.db.enums.TransactionStatus;
import quantasma.app.db.tables.records.TransactionsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1320350184;

    /**
     * The reference instance of <code>public.transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>public.transactions.id</code>.
     */
    public final TableField<TransactionsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('transactions_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.transactions.broker_id</code>.
     */
    public final TableField<TransactionsRecord, Long> BROKER_ID = createField("broker_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transactions.open_on</code>.
     */
    public final TableField<TransactionsRecord, LocalDateTime> OPEN_ON = createField("open_on", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.transactions.close_on</code>.
     */
    public final TableField<TransactionsRecord, LocalDateTime> CLOSE_ON = createField("close_on", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.transactions.open_order_id</code>.
     */
    public final TableField<TransactionsRecord, Long> OPEN_ORDER_ID = createField("open_order_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transactions.close_order_id</code>.
     */
    public final TableField<TransactionsRecord, Long> CLOSE_ORDER_ID = createField("close_order_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.transactions.pips_profit</code>.
     */
    public final TableField<TransactionsRecord, BigDecimal> PIPS_PROFIT = createField("pips_profit", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.transactions.strategy_id</code>.
     */
    public final TableField<TransactionsRecord, Long> STRATEGY_ID = createField("strategy_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transactions.status</code>.
     */
    public final TableField<TransactionsRecord, TransactionStatus> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(quantasma.app.db.enums.TransactionStatus.class), this, "");

    /**
     * The column <code>public.transactions.x_created_on</code>.
     */
    public final TableField<TransactionsRecord, LocalDateTime> X_CREATED_ON = createField("x_created_on", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.transactions.x_updated_on</code>.
     */
    public final TableField<TransactionsRecord, LocalDateTime> X_UPDATED_ON = createField("x_updated_on", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.transactions.x_deleted_on</code>.
     */
    public final TableField<TransactionsRecord, LocalDateTime> X_DELETED_ON = createField("x_deleted_on", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.transactions.x_active</code>.
     */
    public final TableField<TransactionsRecord, Boolean> X_ACTIVE = createField("x_active", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transactions(Table<O> child, ForeignKey<O, TransactionsRecord> key) {
        super(child, key, TRANSACTIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSACTIONS_IDX_OPEN_ORDER_ID, Indexes.TRANSACTIONS_IDX_OPEN_ORDER_ID_CLOSE_ORDER_ID, Indexes.TRANSACTIONS_IDX_STRATEGY_ID, Indexes.TRANSACTIONS_PK_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TransactionsRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRANSACTIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_PK_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionsRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionsRecord>>asList(Keys.TRANSACTIONS_PK_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransactionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionsRecord, ?>>asList(Keys.TRANSACTIONS__TRANSACTIONS_FK_BROKER_ID, Keys.TRANSACTIONS__TRANSACTIONS_FK_OPEN_ORDER_ID, Keys.TRANSACTIONS__TRANSACTIONS_FK_CLOSE_ORDER_ID, Keys.TRANSACTIONS__TRANSACTIONS_FK_STRATEGY_ID);
    }

    public Brokers brokers() {
        return new Brokers(this, Keys.TRANSACTIONS__TRANSACTIONS_FK_BROKER_ID);
    }

    public Orders transactions_TransactionsFkOpenOrderId() {
        return new Orders(this, Keys.TRANSACTIONS__TRANSACTIONS_FK_OPEN_ORDER_ID);
    }

    public Orders transactions_TransactionsFkCloseOrderId() {
        return new Orders(this, Keys.TRANSACTIONS__TRANSACTIONS_FK_CLOSE_ORDER_ID);
    }

    public Strategies strategies() {
        return new Strategies(this, Keys.TRANSACTIONS__TRANSACTIONS_FK_STRATEGY_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }
}
