/*
 * This file is generated by jOOQ.
 */
package quantasma.app.db;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Configuration;
import org.jooq.Result;
import org.jooq.Sequence;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

import quantasma.app.db.tables.Brokers;
import quantasma.app.db.tables.Instruments;
import quantasma.app.db.tables.Orders;
import quantasma.app.db.tables.Strategies;
import quantasma.app.db.tables.TablesContainingAuditColumns;
import quantasma.app.db.tables.Transactions;
import quantasma.app.db.tables.records.TablesContainingAuditColumnsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Public extends SchemaImpl {

    private static final long serialVersionUID = 1586602392;

    /**
     * The reference instance of <code>public</code>
     */
    public static final Public PUBLIC = new Public();

    /**
     * The table <code>public.brokers</code>.
     */
    public final Brokers BROKERS = quantasma.app.db.tables.Brokers.BROKERS;

    /**
     * The table <code>public.instruments</code>.
     */
    public final Instruments INSTRUMENTS = quantasma.app.db.tables.Instruments.INSTRUMENTS;

    /**
     * The table <code>public.orders</code>.
     */
    public final Orders ORDERS = quantasma.app.db.tables.Orders.ORDERS;

    /**
     * The table <code>public.strategies</code>.
     */
    public final Strategies STRATEGIES = quantasma.app.db.tables.Strategies.STRATEGIES;

    /**
     * The table <code>public.tables_containing_audit_columns</code>.
     */
    public final TablesContainingAuditColumns TABLES_CONTAINING_AUDIT_COLUMNS = quantasma.app.db.tables.TablesContainingAuditColumns.TABLES_CONTAINING_AUDIT_COLUMNS;

    /**
     * Call <code>public.tables_containing_audit_columns</code>.
     */
    public static Result<TablesContainingAuditColumnsRecord> TABLES_CONTAINING_AUDIT_COLUMNS(Configuration configuration) {
        return configuration.dsl().selectFrom(quantasma.app.db.tables.TablesContainingAuditColumns.TABLES_CONTAINING_AUDIT_COLUMNS.call()).fetch();
    }

    /**
     * Get <code>public.tables_containing_audit_columns</code> as a table.
     */
    public static TablesContainingAuditColumns TABLES_CONTAINING_AUDIT_COLUMNS() {
        return quantasma.app.db.tables.TablesContainingAuditColumns.TABLES_CONTAINING_AUDIT_COLUMNS.call();
    }

    /**
     * The table <code>public.transactions</code>.
     */
    public final Transactions TRANSACTIONS = quantasma.app.db.tables.Transactions.TRANSACTIONS;

    /**
     * No further instances allowed
     */
    private Public() {
        super("public", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Sequence<?>> getSequences() {
        List result = new ArrayList();
        result.addAll(getSequences0());
        return result;
    }

    private final List<Sequence<?>> getSequences0() {
        return Arrays.<Sequence<?>>asList(
            Sequences.BROKERS_ID_SEQ,
            Sequences.INSTRUMENTS_ID_SEQ,
            Sequences.ORDERS_ID_SEQ,
            Sequences.STRATEGIES_ID_SEQ,
            Sequences.TRANSACTIONS_ID_SEQ);
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Brokers.BROKERS,
            Instruments.INSTRUMENTS,
            Orders.ORDERS,
            Strategies.STRATEGIES,
            TablesContainingAuditColumns.TABLES_CONTAINING_AUDIT_COLUMNS,
            Transactions.TRANSACTIONS);
    }
}
