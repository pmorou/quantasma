/*
 * This file is generated by jOOQ.
 */
package quantasma.app.db.tables.records;


import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;

import quantasma.app.db.tables.TablesContainingAuditColumns;
import quantasma.app.db.tables.interfaces.ITablesContainingAuditColumns;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "tables_containing_audit_columns", schema = "public")
public class TablesContainingAuditColumnsRecord extends TableRecordImpl<TablesContainingAuditColumnsRecord> implements Record2<String, String>, ITablesContainingAuditColumns {

    private static final long serialVersionUID = 1177386444;

    /**
     * Setter for <code>public.tables_containing_audit_columns.schema_name</code>.
     */
    @Override
    public void setSchemaName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.tables_containing_audit_columns.schema_name</code>.
     */
    @Column(name = "schema_name")
    @Override
    public String getSchemaName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.tables_containing_audit_columns.table_name</code>.
     */
    @Override
    public void setTableName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.tables_containing_audit_columns.table_name</code>.
     */
    @Column(name = "table_name")
    @Override
    public String getTableName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return TablesContainingAuditColumns.TABLES_CONTAINING_AUDIT_COLUMNS.SCHEMA_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return TablesContainingAuditColumns.TABLES_CONTAINING_AUDIT_COLUMNS.TABLE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getSchemaName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getTableName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getSchemaName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTableName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TablesContainingAuditColumnsRecord value1(String value) {
        setSchemaName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TablesContainingAuditColumnsRecord value2(String value) {
        setTableName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TablesContainingAuditColumnsRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ITablesContainingAuditColumns from) {
        setSchemaName(from.getSchemaName());
        setTableName(from.getTableName());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ITablesContainingAuditColumns> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TablesContainingAuditColumnsRecord
     */
    public TablesContainingAuditColumnsRecord() {
        super(TablesContainingAuditColumns.TABLES_CONTAINING_AUDIT_COLUMNS);
    }

    /**
     * Create a detached, initialised TablesContainingAuditColumnsRecord
     */
    public TablesContainingAuditColumnsRecord(String schemaName, String tableName) {
        super(TablesContainingAuditColumns.TABLES_CONTAINING_AUDIT_COLUMNS);

        set(0, schemaName);
        set(1, tableName);
    }
}
